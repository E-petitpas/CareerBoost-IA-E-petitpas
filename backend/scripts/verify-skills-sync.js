require('dotenv').config();
const { supabase } = require('../src/config/supabase');
const skillsService = require('../src/services/skillsParsingService');

/**
 * Script de v√©rification de la synchronisation entre :
 * - Le dictionnaire de parsing (skillsParsingService.js)
 * - La base de donn√©es (table skills)
 */

async function verifySkillsSync() {
  console.log('üîç V√©rification de la synchronisation des comp√©tences...\n');
  
  try {
    // 1. R√©cup√©rer toutes les comp√©tences de la base de donn√©es
    console.log('üìä R√©cup√©ration des comp√©tences en base...');
    const { data: dbSkills, error: dbError } = await supabase
      .from('skills')
      .select('slug, display_name, category');
    
    if (dbError) {
      console.error('‚ùå Erreur r√©cup√©ration DB:', dbError.message);
      return;
    }
    
    console.log(`‚úÖ ${dbSkills.length} comp√©tences trouv√©es en base\n`);
    
    // 2. R√©cup√©rer le dictionnaire de parsing
    console.log('üìñ Analyse du dictionnaire de parsing...');
    const parsingSkills = skillsService.skillsKeywords;
    
    console.log(`‚úÖ ${Object.keys(parsingSkills).length} comp√©tences dans le dictionnaire\n`);
    
    // 3. Cr√©er des maps pour la comparaison
    const dbSkillsMap = new Map();
    dbSkills.forEach(skill => {
      dbSkillsMap.set(skill.slug, skill);
    });
    
    const parsingSkillsMap = new Map();
    Object.entries(parsingSkills).forEach(([keyword, skillInfo]) => {
      parsingSkillsMap.set(skillInfo.slug, {
        keyword,
        ...skillInfo
      });
    });
    
    // 4. Trouver les comp√©tences manquantes en base
    console.log('üîç Recherche des comp√©tences manquantes en base...');
    const missingInDb = [];
    
    parsingSkillsMap.forEach((skillInfo, slug) => {
      if (!dbSkillsMap.has(slug)) {
        missingInDb.push({
          slug,
          display_name: skillInfo.display_name,
          category: skillInfo.category,
          keyword: skillInfo.keyword
        });
      }
    });
    
    if (missingInDb.length > 0) {
      console.log(`‚ùå ${missingInDb.length} comp√©tences manquantes en base :`);
      missingInDb.forEach(skill => {
        console.log(`   - ${skill.display_name} (${skill.slug}) - Cat√©gorie: ${skill.category}`);
      });
      console.log();
    } else {
      console.log('‚úÖ Toutes les comp√©tences du dictionnaire sont en base\n');
    }
    
    // 5. Trouver les comp√©tences en base mais pas dans le dictionnaire
    console.log('üîç Recherche des comp√©tences en base non r√©f√©renc√©es...');
    const notInParsing = [];
    
    dbSkills.forEach(dbSkill => {
      if (!parsingSkillsMap.has(dbSkill.slug)) {
        notInParsing.push(dbSkill);
      }
    });
    
    if (notInParsing.length > 0) {
      console.log(`‚ö†Ô∏è ${notInParsing.length} comp√©tences en base non r√©f√©renc√©es dans le parsing :`);
      notInParsing.slice(0, 20).forEach(skill => {
        console.log(`   - ${skill.display_name} (${skill.slug}) - Cat√©gorie: ${skill.category}`);
      });
      if (notInParsing.length > 20) {
        console.log(`   ... et ${notInParsing.length - 20} autres`);
      }
      console.log();
    } else {
      console.log('‚úÖ Toutes les comp√©tences en base sont r√©f√©renc√©es dans le parsing\n');
    }
    
    // 6. V√©rifier les incoh√©rences de noms/cat√©gories
    console.log('üîç V√©rification des incoh√©rences...');
    const inconsistencies = [];
    
    parsingSkillsMap.forEach((skillInfo, slug) => {
      const dbSkill = dbSkillsMap.get(slug);
      if (dbSkill) {
        if (dbSkill.display_name !== skillInfo.display_name) {
          inconsistencies.push({
            slug,
            type: 'display_name',
            db: dbSkill.display_name,
            parsing: skillInfo.display_name
          });
        }
        if (dbSkill.category !== skillInfo.category) {
          inconsistencies.push({
            slug,
            type: 'category',
            db: dbSkill.category,
            parsing: skillInfo.category
          });
        }
      }
    });
    
    if (inconsistencies.length > 0) {
      console.log(`‚ö†Ô∏è ${inconsistencies.length} incoh√©rences d√©tect√©es :`);
      inconsistencies.forEach(inc => {
        console.log(`   - ${inc.slug} (${inc.type}): DB="${inc.db}" vs Parsing="${inc.parsing}"`);
      });
      console.log();
    } else {
      console.log('‚úÖ Aucune incoh√©rence d√©tect√©e\n');
    }
    
    // 7. Statistiques par cat√©gorie
    console.log('üìä Statistiques par cat√©gorie (Base de donn√©es) :');
    const categoryStats = {};
    dbSkills.forEach(skill => {
      if (skill.category) {
        categoryStats[skill.category] = (categoryStats[skill.category] || 0) + 1;
      }
    });
    
    Object.entries(categoryStats)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 15)
      .forEach(([category, count]) => {
        console.log(`   ${category}: ${count} comp√©tences`);
      });
    
    // 8. R√©sum√© final
    console.log('\nüéØ R√âSUM√â DE LA SYNCHRONISATION');
    console.log('=====================================');
    console.log(`üìä Comp√©tences en base: ${dbSkills.length}`);
    console.log(`üìñ Comp√©tences dans le parsing: ${parsingSkillsMap.size}`);
    console.log(`‚ùå Manquantes en base: ${missingInDb.length}`);
    console.log(`‚ö†Ô∏è Non r√©f√©renc√©es dans le parsing: ${notInParsing.length}`);
    console.log(`üîß Incoh√©rences: ${inconsistencies.length}`);
    
    const syncRate = ((parsingSkillsMap.size - missingInDb.length) / parsingSkillsMap.size * 100).toFixed(1);
    console.log(`üìà Taux de synchronisation: ${syncRate}%`);
    
    if (missingInDb.length === 0 && inconsistencies.length === 0) {
      console.log('\nüéâ Synchronisation parfaite ! Le syst√®me est pr√™t.');
    } else if (missingInDb.length > 0) {
      console.log('\n‚ö†Ô∏è Action requise: Ajoutez les comp√©tences manquantes en base.');
      console.log('üí° Utilisez le script production-skills-seed.js pour les ajouter.');
    }
    
    // 9. G√©n√©rer un script SQL pour les comp√©tences manquantes
    if (missingInDb.length > 0) {
      console.log('\nüìù Script SQL pour ajouter les comp√©tences manquantes :');
      console.log('-- Copiez et ex√©cutez ce script dans votre base de donn√©es');
      console.log('INSERT INTO skills (slug, display_name, category) VALUES');
      
      const sqlValues = missingInDb.map(skill => 
        `  ('${skill.slug}', '${skill.display_name.replace(/'/g, "''")}', '${skill.category}')`
      ).join(',\n');
      
      console.log(sqlValues);
      console.log('ON CONFLICT (slug) DO NOTHING;');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    console.error(error);
  }
}

if (require.main === module) {
  verifySkillsSync().catch(console.error);
}

module.exports = { verifySkillsSync };
