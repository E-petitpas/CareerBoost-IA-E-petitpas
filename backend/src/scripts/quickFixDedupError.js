require('dotenv').config();
const { supabase } = require('../config/supabase');

async function quickFixDedupError() {
  console.log('üöÄ Correction rapide de l\'erreur dedup_hash...');
  
  try {
    // 1. Identifier l'offre probl√©matique avec le hash sp√©cifique de l'erreur
    const problematicHash = '6e77f1a224c8b29783b729be7d5d5a90';
    
    console.log(`üîç Recherche des offres avec le hash: ${problematicHash}`);
    
    const { data: duplicateOffers, error: searchError } = await supabase
      .from('job_offers')
      .select('id, title, created_at, source, company_id')
      .eq('dedup_hash', problematicHash)
      .order('created_at', { ascending: true });
    
    if (searchError) {
      console.error('‚ùå Erreur recherche:', searchError);
      throw searchError;
    }
    
    console.log(`üìä ${duplicateOffers.length} offres trouv√©es avec ce hash`);
    
    if (duplicateOffers.length === 0) {
      console.log('‚úÖ Aucune offre trouv√©e avec ce hash, le probl√®me est peut-√™tre d√©j√† r√©solu');
      return;
    }
    
    // Afficher les d√©tails des offres
    duplicateOffers.forEach((offer, index) => {
      console.log(`   ${index + 1}. ID: ${offer.id}, Titre: "${offer.title}", Cr√©√©e: ${offer.created_at}, Source: ${offer.source}`);
    });
    
    if (duplicateOffers.length > 1) {
      // Garder la premi√®re (plus ancienne), supprimer les autres
      const toKeep = duplicateOffers[0];
      const toDelete = duplicateOffers.slice(1);
      
      console.log(`\n‚úÖ Garder l'offre: "${toKeep.title}" (ID: ${toKeep.id})`);
      
      for (const offer of toDelete) {
        console.log(`üóëÔ∏è Suppression de l'offre: "${offer.title}" (ID: ${offer.id})`);
        
        // Supprimer les comp√©tences associ√©es
        await supabase
          .from('job_offer_skills')
          .delete()
          .eq('job_offer_id', offer.id);
        
        // Supprimer les candidatures associ√©es
        await supabase
          .from('applications')
          .delete()
          .eq('job_offer_id', offer.id);
        
        // Supprimer l'offre
        const { error: deleteError } = await supabase
          .from('job_offers')
          .delete()
          .eq('id', offer.id);
        
        if (deleteError) {
          console.error(`‚ùå Erreur suppression offre ${offer.id}:`, deleteError);
        } else {
          console.log(`‚úÖ Offre ${offer.id} supprim√©e avec succ√®s`);
        }
      }
    }
    
    // 2. Corriger la contrainte pour √©viter le probl√®me √† l'avenir
    console.log('\nüîß Correction de la contrainte unique...');
    
    // Supprimer l'ancienne contrainte stricte
    const dropSql = `
      ALTER TABLE job_offers 
      DROP CONSTRAINT IF EXISTS unique_dedup_hash;
    `;
    
    const { error: dropError } = await supabase.rpc('exec_sql', { sql: dropSql });
    
    if (dropError) {
      console.log('‚ö†Ô∏è Erreur suppression contrainte (peut-√™tre d√©j√† supprim√©e):', dropError.message);
    } else {
      console.log('‚úÖ Ancienne contrainte supprim√©e');
    }
    
    // Cr√©er un index unique partiel
    const createIndexSql = `
      CREATE UNIQUE INDEX IF NOT EXISTS unique_dedup_hash_not_null 
      ON job_offers (dedup_hash) 
      WHERE dedup_hash IS NOT NULL;
    `;
    
    const { error: indexError } = await supabase.rpc('exec_sql', { sql: createIndexSql });
    
    if (indexError) {
      console.log('‚ö†Ô∏è Erreur cr√©ation index:', indexError.message);
    } else {
      console.log('‚úÖ Nouvel index unique partiel cr√©√©');
    }
    
    // 3. Test rapide
    console.log('\nüß™ Test rapide...');
    
    const testHash = 'test_' + Date.now();
    const testOffer = {
      title: 'Test Quick Fix',
      description: 'Test',
      company_id: 1,
      source: 'TEST',
      status: 'ACTIVE',
      admin_status: 'PENDING',
      dedup_hash: testHash
    };
    
    const { data: testInsert, error: testError } = await supabase
      .from('job_offers')
      .insert(testOffer)
      .select('id')
      .single();
    
    if (testError) {
      console.error('‚ùå Test √©chou√©:', testError);
    } else {
      console.log('‚úÖ Test r√©ussi: nouvelle offre cr√©√©e');
      
      // Nettoyer
      await supabase.from('job_offers').delete().eq('id', testInsert.id);
      console.log('üßπ Test nettoy√©');
    }
    
    console.log('\nüéâ Correction rapide termin√©e!');
    console.log('üìù R√©sum√©:');
    console.log('   - Doublons supprim√©s');
    console.log('   - Contrainte corrig√©e pour permettre les NULL');
    console.log('   - Syst√®me pr√™t pour de nouvelles offres');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction rapide:', error);
    throw error;
  }
}

// Fonction pour v√©rifier rapidement l'√©tat
async function checkCurrentState() {
  console.log('üìä √âtat actuel de la base de donn√©es...');
  
  try {
    // Compter les offres par dedup_hash
    const { data: hashCounts, error } = await supabase
      .from('job_offers')
      .select('dedup_hash')
      .not('dedup_hash', 'is', null);
    
    if (error) {
      console.error('‚ùå Erreur:', error);
      return;
    }
    
    const hashMap = {};
    hashCounts.forEach(offer => {
      hashMap[offer.dedup_hash] = (hashMap[offer.dedup_hash] || 0) + 1;
    });
    
    const duplicates = Object.entries(hashMap).filter(([hash, count]) => count > 1);
    
    console.log(`üìà Total offres avec dedup_hash: ${hashCounts.length}`);
    console.log(`üîÑ Groupes de doublons: ${duplicates.length}`);
    
    if (duplicates.length > 0) {
      console.log('üö® Doublons d√©tect√©s:');
      duplicates.forEach(([hash, count]) => {
        console.log(`   - Hash ${hash.substring(0, 16)}...: ${count} offres`);
      });
    } else {
      console.log('‚úÖ Aucun doublon d√©tect√©');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur v√©rification:', error);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  console.log('üîß D√©marrage de la correction rapide...\n');
  
  checkCurrentState()
    .then(() => quickFixDedupError())
    .then(() => checkCurrentState())
    .then(() => {
      console.log('\n‚úÖ Script de correction rapide termin√© avec succ√®s!');
      process.exit(0);
    })
    .catch(err => {
      console.error('\n‚ùå Erreur:', err);
      process.exit(1);
    });
}

module.exports = { quickFixDedupError, checkCurrentState };
