// Charger les variables d'environnement
require('dotenv').config();

const franceTravailService = require('../services/franceTravailService');
const offerAggregationService = require('../services/offerAggregationService');
const { supabase } = require('../config/supabase');

async function testFranceTravailIntegration() {
  console.log('üß™ Test de l\'int√©gration France Travail');
  console.log('=====================================\n');

  try {
    // Test 1: V√©rification de la configuration
    console.log('1Ô∏è‚É£ Test de la configuration...');
    if (!process.env.FRANCE_TRAVAIL_CLIENT_ID || !process.env.FRANCE_TRAVAIL_CLIENT_SECRET) {
      throw new Error('Variables d\'environnement France Travail manquantes');
    }
    console.log('‚úÖ Configuration OK\n');

    // Test 2: Test de l'authentification
    console.log('2Ô∏è‚É£ Test de l\'authentification...');
    try {
      const token = await franceTravailService.getAccessToken();
      console.log('‚úÖ Token d\'acc√®s obtenu:', token.substring(0, 20) + '...\n');
    } catch (error) {
      console.error('‚ùå Erreur d\'authentification:', error.message);
      return;
    }

    // Test 3: Test de recherche d'offres
    console.log('3Ô∏è‚É£ Test de recherche d\'offres...');
    try {
      const searchResult = await franceTravailService.searchOffers({
        domaine: 'M18', // Informatique
        range: '0-4' // Seulement 5 offres pour le test
      });
      
      console.log(`‚úÖ ${searchResult.resultats?.length || 0} offres trouv√©es`);
      
      if (searchResult.resultats && searchResult.resultats.length > 0) {
        const firstOffer = searchResult.resultats[0];
        console.log(`   Exemple: "${firstOffer.intitule}" - ${firstOffer.entreprise?.nom || 'Entreprise inconnue'}`);
      }
      console.log('');
    } catch (error) {
      console.error('‚ùå Erreur de recherche:', error.message);
      return;
    }

    // Test 4: Test de normalisation
    console.log('4Ô∏è‚É£ Test de normalisation d\'offre...');
    try {
      const searchResult = await franceTravailService.searchOffers({
        domaine: 'M18',
        range: '0-0' // Une seule offre
      });
      
      if (searchResult.resultats && searchResult.resultats.length > 0) {
        const rawOffer = searchResult.resultats[0];
        const normalizedOffer = franceTravailService.normalizeOffer(rawOffer);
        
        console.log('‚úÖ Offre normalis√©e:');
        console.log(`   Titre: ${normalizedOffer.title}`);
        console.log(`   Ville: ${normalizedOffer.city || 'Non sp√©cifi√©e'}`);
        console.log(`   Type contrat: ${normalizedOffer.contract_type}`);
        console.log(`   Source: ${normalizedOffer.source}`);
        console.log(`   Statut admin: ${normalizedOffer.admin_status}`);
        console.log('');
      }
    } catch (error) {
      console.error('‚ùå Erreur de normalisation:', error.message);
      return;
    }

    // Test 5: Test de cr√©ation d'entreprise France Travail
    console.log('5Ô∏è‚É£ Test de cr√©ation d\'entreprise France Travail...');
    try {
      const companyId = await franceTravailService.getOrCreateFranceTravailCompany();
      console.log('‚úÖ Entreprise France Travail cr√©√©e/trouv√©e:', companyId);
      console.log('');
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation entreprise:', error.message);
      return;
    }

    // Test 6: Test de la base de donn√©es
    console.log('6Ô∏è‚É£ Test de la base de donn√©es...');
    try {
      // V√©rifier que les colonnes France Travail existent
      const { data: testOffer, error } = await supabase
        .from('job_offers')
        .select('id, france_travail_id, france_travail_data, admin_status')
        .limit(1);

      if (error) {
        console.error('‚ùå Erreur base de donn√©es:', error.message);
        console.log('üí° Ex√©cutez la migration: backend/migrations/add_france_travail_integration.sql');
        return;
      }

      console.log('‚úÖ Structure de base de donn√©es OK');
      console.log('');
    } catch (error) {
      console.error('‚ùå Erreur base de donn√©es:', error.message);
      return;
    }

    // Test 7: Test du statut du service d'agr√©gation
    console.log('7Ô∏è‚É£ Test du service d\'agr√©gation...');
    try {
      const status = offerAggregationService.getStatus();
      console.log('‚úÖ Statut du service d\'agr√©gation:');
      console.log(`   Activ√©: ${status.enabled}`);
      console.log(`   En cours: ${status.isRunning}`);
      console.log(`   Intervalle: ${status.syncIntervalHours}h`);
      console.log(`   Max par sync: ${status.maxOffersPerSync}`);
      console.log('');
    } catch (error) {
      console.error('‚ùå Erreur service d\'agr√©gation:', error.message);
      return;
    }

    // Test 8: Test de synchronisation (optionnel)
    if (process.argv.includes('--sync')) {
      console.log('8Ô∏è‚É£ Test de synchronisation compl√®te...');
      try {
        console.log('‚ö†Ô∏è  D√©marrage de la synchronisation (cela peut prendre du temps)...');
        const result = await offerAggregationService.manualSync();
        console.log('‚úÖ Synchronisation termin√©e:', result);
        console.log('');
      } catch (error) {
        console.error('‚ùå Erreur synchronisation:', error.message);
        return;
      }
    } else {
      console.log('8Ô∏è‚É£ Test de synchronisation ignor√© (utilisez --sync pour l\'activer)\n');
    }

    // R√©sum√©
    console.log('üéâ TOUS LES TESTS SONT PASS√âS !');
    console.log('=====================================');
    console.log('‚úÖ L\'int√©gration France Travail est fonctionnelle');
    console.log('');
    console.log('üìã Prochaines √©tapes:');
    console.log('1. Ex√©cuter la migration SQL si ce n\'est pas fait');
    console.log('2. Configurer les variables d\'environnement en production');
    console.log('3. Activer la synchronisation automatique (FRANCE_TRAVAIL_SYNC_ENABLED=true)');
    console.log('4. Tester l\'interface admin sur /admin/france-travail');
    console.log('');

  } catch (error) {
    console.error('üí• ERREUR CRITIQUE:', error.message);
    console.log('\nüìã V√©rifications √† effectuer:');
    console.log('1. Variables d\'environnement FRANCE_TRAVAIL_CLIENT_ID et FRANCE_TRAVAIL_CLIENT_SECRET');
    console.log('2. Connexion internet pour acc√©der √† l\'API France Travail');
    console.log('3. Migration SQL ex√©cut√©e');
    console.log('4. Configuration Supabase correcte');
    process.exit(1);
  }
}

// Fonction utilitaire pour afficher l'aide
function showHelp() {
  console.log('üß™ Script de test de l\'int√©gration France Travail');
  console.log('');
  console.log('Usage:');
  console.log('  node testFranceTravailIntegration.js [options]');
  console.log('');
  console.log('Options:');
  console.log('  --sync    Effectuer une synchronisation compl√®te (optionnel)');
  console.log('  --help    Afficher cette aide');
  console.log('');
  console.log('Exemples:');
  console.log('  node testFranceTravailIntegration.js');
  console.log('  node testFranceTravailIntegration.js --sync');
}

// Point d'entr√©e
if (process.argv.includes('--help')) {
  showHelp();
} else {
  testFranceTravailIntegration();
}
