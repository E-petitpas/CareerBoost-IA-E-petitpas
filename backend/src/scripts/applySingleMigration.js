require('dotenv').config();
const { supabase } = require('../config/supabase');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

async function applySingleMigration(filename) {
  console.log(`üöÄ Application de la migration: ${filename}`);
  
  try {
    const migrationPath = path.join(__dirname, '../../migrations', filename);
    
    if (!fs.existsSync(migrationPath)) {
      throw new Error(`Fichier de migration non trouv√©: ${migrationPath}`);
    }
    
    const sql = fs.readFileSync(migrationPath, 'utf8');
    const checksum = crypto.createHash('md5').update(sql).digest('hex');
    
    console.log(`üìÑ Lecture du fichier: ${filename}`);
    console.log(`üîç Checksum: ${checksum}`);
    
    // V√©rifier si la migration est d√©j√† appliqu√©e
    const { data: existingMigration } = await supabase
      .from('schema_migrations')
      .select('*')
      .eq('filename', filename)
      .single();
      
    if (existingMigration) {
      console.log(`‚ö†Ô∏è  Migration ${filename} d√©j√† appliqu√©e`);
      return;
    }
    
    // Ex√©cuter la migration
    console.log(`‚ö° Ex√©cution de la migration...`);
    const { error: execError } = await supabase.rpc('exec_sql', { sql });
    
    if (execError) {
      console.error('‚ùå Erreur lors de l\'ex√©cution:', execError);
      throw execError;
    }
    
    // Enregistrer la migration
    const { error: insertError } = await supabase
      .from('schema_migrations')
      .insert({
        filename,
        checksum,
        applied_at: new Date().toISOString()
      });
      
    if (insertError) {
      console.error('‚ùå Erreur lors de l\'enregistrement:', insertError);
      throw insertError;
    }
    
    console.log(`‚úÖ Migration ${filename} appliqu√©e avec succ√®s`);
    
  } catch (error) {
    console.error(`‚ùå √âchec de la migration ${filename}:`, error.message);
    throw error;
  }
}

// Utilisation
const filename = process.argv[2];
if (!filename) {
  console.error('Usage: node applySingleMigration.js <filename>');
  process.exit(1);
}

applySingleMigration(filename)
  .then(() => {
    console.log('üéâ Migration termin√©e avec succ√®s');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• √âchec de la migration:', error.message);
    process.exit(1);
  });
